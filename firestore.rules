rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isLawyerOrAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['lawyer', 'admin'];
    }
    
    // User profiles - users can read their own profile
    // Note: Don't use isAdmin() here to avoid circular dependency
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Use Firebase Admin SDK for user deletion
    }
    
    // User settings - users can read/write their own settings
    match /userSettings/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Templates - users can ONLY access their own templates
    // MIGRATION MODE: Allow access to templates without createdBy field
    match /templates/{templateId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.createdBy == request.auth.uid || 
                       !('createdBy' in resource.data) ||  // Allow legacy templates
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy templates
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy templates
                         isAdmin()
                       );
    }
    
    // Services - users can ONLY access their own services
    // MIGRATION MODE: Allow access to services without createdBy field
    match /services/{serviceId} {
      // TEMPORARY: Allow all authenticated users to read services for debugging
      allow read: if isAuthenticated();
      
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy services
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy services
                         isAdmin()
                       );
    }
    
    // Intake customizations - users can ONLY access their own customizations
    // MIGRATION MODE: Allow access to customizations without userId field
    match /intakeCustomizations/{customizationId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.userId == request.auth.uid || 
                       !('userId' in resource.data) ||  // Allow legacy customizations
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.userId == request.auth.uid || 
                         !('userId' in resource.data) ||  // Allow updating legacy customizations
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.userId == request.auth.uid || 
                         !('userId' in resource.data) ||  // Allow deleting legacy customizations
                         isAdmin()
                       );
    }
    
    // Activity logs - users can ONLY see their own activity logs
    match /activityLogs/{logId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }
    
    // Intake Forms - client intake form data (NEW)
    match /intakeForms/{intakeFormId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.createdBy == request.auth.uid || 
                       !('createdBy' in resource.data) ||  // Allow legacy intake forms
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy intake forms
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy intake forms
                         isAdmin()
                       );
    }
    
    // Intakes - client form submissions
    // MIGRATION MODE: Allow access to intakes without createdBy field
    match /intakes/{intakeId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.createdBy == request.auth.uid || 
                       !('createdBy' in resource.data) ||  // Allow legacy intakes
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy intakes
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy intakes
                         isAdmin()
                       );
    }
    
    // Document Artifacts - generated documents
    // MIGRATION MODE: Allow access to artifacts without createdBy field
    match /documentArtifacts/{artifactId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.createdBy == request.auth.uid || 
                       !('createdBy' in resource.data) ||  // Allow legacy artifacts
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy artifacts
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy artifacts
                         isAdmin()
                       );
    }
    
    // Intake Submissions - may be legacy/duplicate of intakes
    // MIGRATION MODE: Allow access to submissions without createdBy field
    match /intakeSubmissions/{submissionId} {
      allow read: if isAuthenticated() && 
                     (
                       resource.data.createdBy == request.auth.uid || 
                       !('createdBy' in resource.data) ||  // Allow legacy submissions
                       isAdmin()
                     );
      allow create: if isLawyerOrAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow updating legacy submissions
                         isAdmin()
                       );
      allow delete: if isAuthenticated() && 
                       (
                         resource.data.createdBy == request.auth.uid || 
                         !('createdBy' in resource.data) ||  // Allow deleting legacy submissions
                         isAdmin()
                       );
    }
    
    // System settings - admin only
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
