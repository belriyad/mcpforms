#!/usr/bin/env node

/**
 * Simple test script to verify email and document generation setup
 * Run with: node scripts/test-setup.js
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Load .env.local if it exists
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envConfig = require('dotenv').config({ path: envPath });
  if (envConfig.error) {
    console.log('‚ö†Ô∏è  Warning: Could not load .env.local');
  }
}

console.log('üß™ MCPForms Setup Test\n');

// Color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkEnvVar(varName, required = false) {
  const value = process.env[varName];
  if (value) {
    log(`‚úÖ ${varName}: Configured`, 'green');
    return true;
  } else if (required) {
    log(`‚ùå ${varName}: MISSING (Required)`, 'red');
    return false;
  } else {
    log(`‚ö†Ô∏è  ${varName}: Not set (Optional)`, 'yellow');
    return true;
  }
}

// Check environment variables
log('\nüìã Checking Environment Variables:', 'cyan');
log('‚îÄ'.repeat(50), 'cyan');

log('\nüî• Firebase Configuration (Public):', 'blue');
const firebasePublic = [
  'NEXT_PUBLIC_FIREBASE_API_KEY',
  'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
  'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
  'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
  'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
  'NEXT_PUBLIC_FIREBASE_APP_ID'
];
let allPublicConfigured = true;
firebasePublic.forEach(varName => {
  if (!checkEnvVar(varName, true)) allPublicConfigured = false;
});

log('\nüîí Server-Side Keys (Private):', 'blue');
const openaiConfigured = checkEnvVar('OPENAI_API_KEY', false);
const resendConfigured = checkEnvVar('RESEND_API_KEY', false);
const fromEmailConfigured = checkEnvVar('FROM_EMAIL', false);
const fromNameConfigured = checkEnvVar('FROM_NAME', false);

log('\nüîß Firebase Admin SDK:', 'blue');
const adminProjectId = checkEnvVar('FIREBASE_PROJECT_ID', false);
const adminClientEmail = checkEnvVar('FIREBASE_CLIENT_EMAIL', false);
const adminPrivateKey = checkEnvVar('FIREBASE_PRIVATE_KEY', false);

// Summary
log('\nüìä Configuration Summary:', 'cyan');
log('‚îÄ'.repeat(50), 'cyan');

const emailReady = resendConfigured;
const documentGenReady = adminProjectId && adminClientEmail && adminPrivateKey;
const aiReady = openaiConfigured;

log(`\n‚úâÔ∏è  Email Notifications: ${emailReady ? '‚úÖ Ready' : '‚ùå Not Configured'}`, emailReady ? 'green' : 'yellow');
log(`üìÑ Document Generation: ${documentGenReady ? '‚úÖ Ready' : '‚ùå Not Configured'}`, documentGenReady ? 'green' : 'yellow');
log(`ü§ñ AI Field Generator: ${aiReady ? '‚úÖ Ready' : '‚ùå Not Configured'}`, aiReady ? 'green' : 'yellow');

// Recommendations
log('\nüí° Next Steps:', 'cyan');
log('‚îÄ'.repeat(50), 'cyan');

if (!allPublicConfigured) {
  log('\n‚ùå CRITICAL: Firebase public configuration incomplete!', 'red');
  log('   Fix: Check your .env.local file', 'yellow');
}

if (!emailReady) {
  log('\n‚ö†Ô∏è  Email notifications will be logged to console only', 'yellow');
  log('   To enable: Add RESEND_API_KEY to .env.local', 'cyan');
  log('   See: EMAIL_DOCUMENT_SETUP_GUIDE.md', 'cyan');
}

if (!documentGenReady) {
  log('\n‚ö†Ô∏è  Document generation will not work', 'yellow');
  log('   To enable: Add Firebase Admin SDK credentials', 'cyan');
  log('   See: EMAIL_DOCUMENT_SETUP_GUIDE.md', 'cyan');
}

if (!aiReady) {
  log('\n‚ö†Ô∏è  AI Field Generator will not work', 'yellow');
  log('   To enable: Add OPENAI_API_KEY to .env.local', 'cyan');
  log('   See: API_KEY_SECURITY_GUIDE.md', 'cyan');
}

if (emailReady && documentGenReady && aiReady && allPublicConfigured) {
  log('\nüéâ All systems configured! You\'re ready to go!', 'green');
  log('   Run: npm run dev', 'cyan');
  log('   Then: http://localhost:3000/admin', 'cyan');
}

log('\nüìö Documentation:', 'cyan');
log('   - EMAIL_DOCUMENT_SETUP_GUIDE.md', 'blue');
log('   - API_KEY_SECURITY_GUIDE.md', 'blue');
log('   - PRODUCTION_READINESS_CHECKLIST.md', 'blue');

log('\n‚ú® Test complete!\n');

process.exit(emailReady && documentGenReady && aiReady && allPublicConfigured ? 0 : 1);
